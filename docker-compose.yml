version: '3.8'

services:
  traefik:
    image: traefik:v3.0
    ports:
      # Host mode is essential to work with IPv6
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - target: 80
        published: 80
        mode: host
        protocol: tcp
      # Listen on port 443, default for HTTPS
      - target: 443
        published: 443
        mode: host
        protocol: tcp
      # Listen on port 8080, default for Traefik UI
      - target: 8080
        published: 8080
        mode: host
        protocol: tcp

    

    deploy:
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public

        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect

        # traefik-https the actual router using HTTPS
        - traefik.http.routers.traefik-public-https.tls=true

        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal

        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le

        # when running in Docker Swarm Mode, use swarm loadbalancer!!
        - traefik.docker.lbswarm=true

      resources:
        limits:
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

      update_config:
        order: stop-first

    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro

      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates

    command:
      # Enable Traefik dashboard
      - "--api.insecure=true"                          

      # Enable Docker Swarm  in Traefik, so that it reads labels from Docker services
      - --providers.swarm.endpoint=unix:///var/run/docker.sock

      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.swarm.exposedbydefault=false

      # Create an entrypoint "http" listening on address 80
      - --entrypoints.http.address=:80

      # Create an entrypoint "https" listening on address 443
      - --entrypoints.https.address=:443

      - "--entrypoints.http.http.redirections.entrypoint.to=https"
      - "--entrypoints.http.http.redirections.entrypoint.scheme=https"

      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=joseph.hirsch@jdav-bayern.de

      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json

      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true

      - "--log.level=DEBUG"

      # Enable the Dashboard and API
      - --api


    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

  webapp:
    image: ghcr.io/jdav-bayern/fahrtkostenabrechnung:latest

    networks:
      - traefik-public
    deploy:
      mode: replicated
      replicas: 2   # Number of replicas for scaling
      update_config:
        parallelism: 1   # Update one container at a time
        delay: 30s       # Delay between updates
        failure_action: rollback
      restart_policy:
        condition: on-failure
      labels:
          - "traefik.enable=true"
          - "traefik.http.routers.webapp.rule=Host(`portal.jdav-bayern.de`)"
          - "traefik.http.routers.webapp.entrypoints=http"
          - "traefik.http.routers.webapp.middlewares=https-redirect"
          - "traefik.http.routers.webapp-https.rule=Host(`portal.jdav-bayern.de`)"
          - "traefik.http.routers.webapp-https.entrypoints=https"

          - "traefik.http.routers.webapp-https.tls=true"
          - "traefik.http.routers.webapp-https.tls.certresolver=le"
          - "traefik.docker.network=traefik-public"
          - "traefik.http.services.webapp-https.loadbalancer.server.port=80"
  
  zitadel-db:
    image: postgres:16-alpine
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    env_file:
      - zitadel-env.txt
    networks:
      - zitadel
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "zitadel", "-U", "zitadel"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s
    volumes:
      - ./zitadel-db-data:/var/lib/postgresql/data
  
  zitadel:
    image: ghcr.io/zitadel/zitadel:latest
    command: start-from-init --masterkeyFromEnv --tlsMode disabled
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.zitadel.rule=Host(`login.portal.jdav-bayern.de`)"
        - "traefik.http.routers.zitadel.entrypoints=http"
        - "traefik.http.routers.zitadel.middlewares=https-redirect"
        - "traefik.http.routers.zitadel-https.rule=Host(`login.portal.jdav-bayern.de`)"
        - "traefik.http.routers.zitadel-https.entrypoints=https"
        - "traefik.http.routers.zitadel-https.tls=true"
        - "traefik.http.routers.zitadel-https.tls.certresolver=le"
        - "traefik.docker.network=traefik-public"
        - "traefik.http.services.zitadel-https.loadbalancer.server.port=8080"
    env_file:
      - zitadel-env.txt
    networks:
      - zitadel
      - traefik-public
    depends_on:
      - zitadel-db

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:


networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:

  zitadel: